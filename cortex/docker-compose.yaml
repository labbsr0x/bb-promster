version: '3.5'

services:

  # A valid/configured cassandra instance must be running on your host.
  # you can run it by executing:
  #   docker run -d --name cassandra --rm -p 9042:9042 cassandra:3.11
  # and then configuring the cortex KEYSPACE by first entering a CQLSH session:
  #   docker exec -it cassandra cqlsh
  # and executing:
  #   CREATE KEYSPACE cortex WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};
  # after that you can just:
  #   docker-compose up -d
  # wait a while, the cortex startup time can be really slow.

  cassandra:
    container_name: cassandra
    image: labbsr0x/cassandra:latest
    build: 
      context: cassandra/
    ports: 
      - 9042:9042

  cortex1:
    container_name: cortex1
    image: quay.io/cortexproject/cortex:v0.6.0
    depends_on:
      - consul
      - cassandra
    ports:
      - 9001:9009
    volumes:
      - ./simple-config.yaml:/etc/simple-config.yaml
    command: -config.file=/etc/simple-config.yaml -ring.store=consul -consul.hostname=consul:8500 -distributor.replication-factor=3 -ingester.max-chunk-age=2m
    restart: on-failure

  cortex2:
    container_name: cortex2
    image: quay.io/cortexproject/cortex:v0.6.0
    depends_on:
      - consul
      - cassandra
    ports:
      - 9002:9009
    volumes:
      - ./simple-config.yaml:/etc/simple-config.yaml
    command: -config.file=/etc/simple-config.yaml -ring.store=consul -consul.hostname=consul:8500 -distributor.replication-factor=3 -ingester.max-chunk-age=2m
    restart: on-failure

  cortex3:
    container_name: cortex3
    image: quay.io/cortexproject/cortex:v0.6.0
    depends_on:
      - consul
      - cassandra
    ports:
      - 9003:9009
    volumes:
      - ./simple-config.yaml:/etc/simple-config.yaml
    command: -config.file=/etc/simple-config.yaml -ring.store=consul -consul.hostname=consul:8500 -distributor.replication-factor=3 -ingester.max-chunk-age=2m
    restart: on-failure

  consul:
    image: consul
    ports:
      - 8500:8500
    environment: 
      - CONSUL_BIND_INTERFACE=eth0

  etcd:
    image: quay.io/coreos/etcd:v3.2.25
    ports:
      - 2379:2379
    environment:
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379

  example-1:
    image: abilioesteves/metrics-generator
    depends_on:
        - etcd
    ports:
        - 32865
    environment:
        - REGISTRY_ETCD_URL=http://etcd:2379
        - REGISTRY_SERVICE=example-1
        - REGISTRY_ETCD_BASE=/metrics-generator

  # consider example-2 to be a completely different application from example-1
  example-2:
    image: abilioesteves/metrics-generator
    depends_on: 
        - etcd
    ports:
        - 32865
    environment:
        - REGISTRY_ETCD_URL=http://etcd:2379
        - REGISTRY_SERVICE=example-2
        - REGISTRY_ETCD_BASE=/metrics-generator

  bb-promster-l1:
    build: ../
    image: labbsr0x/bb-promster:latest
    depends_on: 
      - example-1
      - example-2
    ports:
      - 9090:9090
    environment:
      - REGISTRY_SERVICE=example
      - REGISTRY_ETCD_BASE=/metrics-generator
      - BB_PROMSTER_LEVEL=1
      - ETCD_URLS=http://etcd:2379
      - SCRAPE_ETCD_PATH=/metrics-generator/example # based on how the examples are configured ($REGISTRY_ETCD_BASE/$REGISTRY_SERVICE)
      - REMOTE_WRITE_URL=http://cortex1:9009/api/prom/push
      # - REMOTE_WRITE_BASIC_AUTH=user1:teste1
      # - TLS_INSECURE=true
      # - SCRAPE_PATHS=/your-custom-metrics-path
      # - SCHEME="https"
  grafana:
    image: grafana/grafana:latest
    ports:
      - 3000:3000